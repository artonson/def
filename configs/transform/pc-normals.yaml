# @package _group_

train:
  _target_: sharpf.utils.abc_utils.torch.CompositeTransform
  transforms:
    - _target_: sharpf.utils.abc_utils.torch.ToTensor
      keys: ['points', 'distances', 'normals']
      type: torch.FloatTensor
    - _target_: sharpf.utils.abc_utils.torch.Center
      keys: ['points']
      dim: 0
    - _target_: sharpf.utils.abc_utils.torch.NormalizeL2
      keys: ['points']
      dim: 1
    - _target_: sharpf.utils.abc_utils.torch.Random3DRotation
      keys: ['points', 'normals']
    - _target_: sharpf.utils.abc_utils.torch.Concatenate
      in_keys: ['points', 'normals']
      dim: 1
      out_key: 'points'
    - _target_: sharpf.utils.abc_utils.torch.DeleteKeys
      keys: ['normals']

val:
  _target_: sharpf.utils.abc_utils.torch.CompositeTransform
  transforms:
    - _target_: sharpf.utils.abc_utils.torch.ToTensor
      keys: ['points', 'distances', 'normals']
      type: torch.FloatTensor
    - _target_: sharpf.utils.abc_utils.torch.Center
      keys: ['points']
      dim: 0
    - _target_: sharpf.utils.abc_utils.torch.NormalizeL2
      keys: ['points']
      dim: 1
    - _target_: sharpf.utils.abc_utils.torch.Concatenate
      in_keys: ['points', 'normals']
      dim: 1
      out_key: 'points'
    - _target_: sharpf.utils.abc_utils.torch.DeleteKeys
      keys: ['normals']

test:
  _target_: sharpf.utils.abc_utils.torch.CompositeTransform
  transforms:
    - _target_: sharpf.utils.abc_utils.torch.ToTensor
      keys: ['points', 'distances', 'normals']
      type: torch.FloatTensor
    - _target_: sharpf.utils.abc_utils.torch.Center
      keys: ['points']
      dim: 0
    - _target_: sharpf.utils.abc_utils.torch.NormalizeL2
      keys: ['points']
      dim: 1
    - _target_: sharpf.utils.abc_utils.torch.Concatenate
      in_keys: ['points', 'normals']
      dim: 1
      out_key: 'points'
    - _target_: sharpf.utils.abc_utils.torch.DeleteKeys
      keys: ['normals']
