# @package _group_

train:
  _target_: defs.utils.abc_utils.torch.CompositeTransform
  transforms:
    - _target_: defs.utils.abc_utils.torch.ToTensor
      keys: ['points', 'distances']
      type: torch.FloatTensor
    - _target_: defs.utils.abc_utils.torch.Center
      keys: ['points']
      dim: 0
    - _target_: defs.utils.abc_utils.torch.NormalizeByMaxL2
      keys: ['points']
      dim: 1
    - _target_: defs.utils.abc_utils.torch.Random3DRotation
      keys: ['points']
    - _target_: defs.utils.abc_utils.torch.ComputeTargetSharp
      resolution: ${datasets.resolution_q}

val: ${transform.test}

test:
  _target_: defs.utils.abc_utils.torch.CompositeTransform
  transforms:
    - _target_: defs.utils.abc_utils.torch.ToTensor
      keys: ['points', 'distances']
      type: torch.FloatTensor
    - _target_: defs.utils.abc_utils.torch.Center
      keys: ['points']
      dim: 0
    - _target_: defs.utils.abc_utils.torch.NormalizeByMaxL2
      keys: ['points']
      dim: 1
    - _target_: defs.utils.abc_utils.torch.ComputeIsFlatProperty
    - _target_: defs.utils.abc_utils.torch.ComputeTargetSharp
      resolution: ${datasets.resolution_q}
